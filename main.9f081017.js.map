{"version":3,"sources":["scripts/main.js"],"names":["tablGamme","document","querySelector","buttonStart","messageStart","messageWin","messageOver","rows","columns","flag","flagSetRandom","score","gammeBoard","copyBoard","arrayEqual","setGame","r","c","tile","cells","num","id","toString","updateTile","setRandomInEmptyCell","emptyTile","moves","col","row","found","Math","floor","random","getElementById","innerText","classList","add","value","remove","filterZero","filter","doubling","rowTemp","i","length","push","slideLeft","slideRight","reverse","slideUp","slideDown","addEventListener","e","code","map","slice","every","rowIndex","columnIndex","style","color"],"mappings":";AAAA,aAEA,IAAMA,EAAYC,SAASC,cAAc,eACnCC,EAAcF,SAASC,cAAc,UACrCE,EAAeH,SAASC,cAAc,kBACtCG,EAAaJ,SAASC,cAAc,gBACpCI,EAAcL,SAASC,cAAc,iBACrCK,EAAO,EACPC,EAAU,EACZC,EAAO,EACPC,GAAgB,EAChBC,EAAQ,EACRC,EAAa,GACbC,EAAY,GACZC,GAAa,EAcjB,SAASC,IACPH,EAAa,CACX,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,IAGP,IAAA,IAAII,EAAI,EAAGA,EAAIT,EAAMS,IACnB,IAAA,IAAIC,EAAI,EAAGA,EAAIT,EAASS,IAAK,CAC1BC,IAAAA,EAAOlB,EAAUO,KAAKS,GAAGG,MAAMF,GAC/BG,EAAMR,EAAWI,GAAGC,GAE1BC,EAAKG,GAAKL,EAAEM,WAAaL,EAAEK,WAC3BC,EAAWL,EAAME,GAGrBI,IACAA,IAGF,SAASC,IACF,IAAA,IAAIT,EAAI,EAAGA,EAAIT,EAAMS,IACnB,IAAA,IAAIC,EAAI,EAAGA,EAAIT,EAASS,IACvBL,GAAqB,IAArBA,EAAWI,GAAGC,GACT,OAAA,EAKN,OAAA,EAGT,SAASS,IACF,IAAA,IAAIV,EAAI,EAAGA,EAAIT,EAAO,EAAGS,IACvB,IAAA,IAAIC,EAAI,EAAGA,EAAIT,EAAU,EAAGS,IAC1BL,GAAAA,EAAWI,GAAGC,KAAOL,EAAWI,GAAGC,EAAI,IACjB,IAArBL,EAAWI,GAAGC,GACX,OAAA,EAKR,IAAA,IAAIU,EAAM,EAAGA,EAAMnB,EAAU,EAAGmB,IAC9B,IAAA,IAAIC,EAAM,EAAGA,EAAMrB,EAAO,EAAGqB,IAC3BhB,GAAAA,EAAWgB,GAAKD,KAASf,EAAWgB,EAAM,GAAGD,IACnB,IAAzBf,EAAWgB,GAAKD,GACb,OAAA,EAKN,OAAA,EAGT,SAASH,IACH,GAACC,KAAgBf,EAMd,IAFHmB,IAAAA,GAAQ,GAEJA,GAAO,CACPb,IAAAA,EAAIc,KAAKC,MAAMD,KAAKE,SAAWzB,GAC/BU,EAAIa,KAAKC,MAAMD,KAAKE,SAAWxB,GAEjCI,GAAqB,IAArBA,EAAWI,GAAGC,GAAU,CAC1BL,EAAWI,GAAGC,GAAKa,KAAKE,SAAW,GAAM,EAAI,EAEvCd,IAAAA,EAAOjB,SAASgC,eAAejB,EAAEM,WAAaL,EAAEK,YAEtDJ,EAAKgB,UAAetB,GAAAA,OAAAA,EAAWI,GAAGC,IAClCC,EAAKiB,UAAUC,IAAmBxB,eAAAA,OAAAA,EAAWI,GAAGC,KAChDY,GAAQ,IAKd,SAASN,EAAWL,EAAME,GACxBF,EAAKgB,UAAY,GACjBhB,EAAKiB,UAAUE,MAAQ,GACvBnB,EAAKiB,UAAUC,IAAI,cAEfhB,EAAM,IACRF,EAAKgB,UAAYd,EAEbA,EAAM,MACRF,EAAKiB,UAAUC,IAAI,eAAiBhB,EAAIE,YAG9B,OAARF,IACFF,EAAKiB,UAAUC,IAAI,eAAiBhB,EAAIE,YACxCjB,EAAW8B,UAAUG,OAAO,YAgHlC,SAASC,EAAWX,GACXA,OAAAA,EAAIY,OAAO,SAAApB,GAAOA,OAAQ,IAARA,IAG3B,SAASqB,EAASC,GAGX,IAFDd,IAAAA,EAAMW,EAAWG,GAEZC,EAAI,EAAGA,EAAIf,EAAIgB,OAAQD,IAC1Bf,EAAIe,KAAOf,EAAIe,EAAI,KACrBf,EAAIe,IAAM,EACVf,EAAIe,EAAI,GAAK,EACbhC,GAASiB,EAAIe,IAMVf,IAFPA,EAAMW,EAAWX,GAEVA,EAAIgB,OAASpC,GAClBoB,EAAIiB,KAAK,GAGJjB,OAAAA,EAGT,SAASkB,IACF,IAAA,IAAI9B,EAAI,EAAGA,EAAIT,EAAMS,IAAK,CACzBY,IAAAA,EAAMhB,EAAWI,GAErBY,EAAMa,EAASb,GACfhB,EAAWI,GAAKY,EAEX,IAAA,IAAIX,EAAI,EAAGA,EAAIT,EAASS,IAAK,CAIhCM,EAHatB,SAASgC,eAAejB,EAAEM,WAAaL,EAAEK,YAC1CV,EAAWI,GAAGC,MAOhC,SAAS8B,IACF,IAAA,IAAI/B,EAAI,EAAGA,EAAIT,EAAMS,IAAK,CACzBY,IAAAA,EAAMhB,EAAWI,GAErBY,EAAIoB,WACJpB,EAAMa,EAASb,IACXoB,UACJpC,EAAWI,GAAKY,EAEX,IAAA,IAAIX,EAAI,EAAGA,EAAIT,EAASS,IAAK,CAIhCM,EAHatB,SAASgC,eAAejB,EAAEM,WAAaL,EAAEK,YAC1CV,EAAWI,GAAGC,MAOhC,SAASgC,IACF,IAAA,IAAIhC,EAAI,EAAGA,EAAIT,EAASS,IAAK,CAC5BW,IAAAA,EAAM,CACRhB,EAAW,GAAGK,GACdL,EAAW,GAAGK,GACdL,EAAW,GAAGK,GACdL,EAAW,GAAGK,IAGhBW,EAAMa,EAASb,GAEV,IAAA,IAAIZ,EAAI,EAAGA,EAAIT,EAAMS,IAAK,CAC7BJ,EAAWI,GAAGC,GAAKW,EAAIZ,GAMvBO,EAJatB,SAASgC,eAAejB,EAAEM,WAAaL,EAAEK,YAE1CV,EAAWI,GAAGC,MAOhC,SAASiC,IACF,IAAA,IAAIjC,EAAI,EAAGA,EAAIT,EAASS,IAAK,CAC5BW,IAAAA,EAAM,CACRhB,EAAW,GAAGK,GACdL,EAAW,GAAGK,GACdL,EAAW,GAAGK,GACdL,EAAW,GAAGK,IAGhBW,EAAIoB,WACJpB,EAAMa,EAASb,IACXoB,UAEC,IAAA,IAAIhC,EAAI,EAAGA,EAAIT,EAAMS,IAAK,CAC7BJ,EAAWI,GAAGC,GAAKW,EAAIZ,GAMvBO,EAJatB,SAASgC,eAAejB,EAAEM,WAAaL,EAAEK,YAE1CV,EAAWI,GAAGC,MA3ThCd,EAAYgD,iBAAiB,QAAS,WACpChD,EAAYgC,UAAUE,MAAQ,GAC9BlC,EAAYgC,UAAUC,IAAI,SAAU,WACpCjC,EAAY+B,UAAY,UACxB9B,EAAa+B,UAAUC,IAAI,UAC3B9B,EAAY6B,UAAUC,IAAI,UAC1BnC,SAASC,cAAc,eAAegC,UAAY,EAClDvB,EAAQ,EACRD,GAAgB,EAChBK,MAoGFd,SAASkD,iBAAiB,QAAS,SAACC,GAC1BA,OAAAA,EAAEC,MACH,IAAA,YACH5C,EAAOE,EAEPE,EAAYD,EAAW0C,IAAI,SAAA1B,GAAOA,OAAAA,EAAI2B,UAEtCT,KAEAhC,EAAaF,EAAW4C,MAAM,SAAC5B,EAAK6B,GAClC7B,OAAAA,EAAI4B,MACF,SAACnB,EAAOqB,GAAgBrB,OAAAA,IAAUxB,EAAU4C,GAAUC,SAGrCjD,IAASE,GAC5Ba,IACAd,GAAgB,GAEhBA,GAAgB,EAGlBc,IAEAE,IAEA,MAEG,IAAA,aACHjB,EAAOE,EAEPE,EAAYD,EAAW0C,IAAI,SAAA1B,GAAOA,OAAAA,EAAI2B,UAEtCR,KAEAjC,EAAaF,EAAW4C,MAAM,SAAC5B,EAAK6B,GAClC7B,OAAAA,EAAI4B,MACF,SAACnB,EAAOqB,GAAgBrB,OAAAA,IAAUxB,EAAU4C,GAAUC,SAGrCjD,IAASE,GAC5Ba,IACAd,GAAgB,GAEhBA,GAAgB,EAGlBc,IAEAE,IAEA,MAEG,IAAA,UACHjB,EAAOE,EACPsC,IAEApC,EAAYD,EAAW0C,IAAI,SAAA1B,GAAOA,OAAAA,EAAI2B,UAEtC/B,KAEAV,EAAaF,EAAW4C,MAAM,SAAC5B,EAAK6B,GAClC7B,OAAAA,EAAI4B,MACF,SAACnB,EAAOqB,GAAgBrB,OAAAA,IAAUxB,EAAU4C,GAAUC,SAGrCjD,IAASE,GAC5Ba,IACAd,GAAgB,GAEhBA,GAAgB,EAGlBgB,IAEA,MAEG,IAAA,YACHjB,EAAOE,EACPE,EAAYD,EAAW0C,IAAI,SAAA1B,GAAOA,OAAAA,EAAI2B,UACtCL,KAEApC,EAAaF,EAAW4C,MAAM,SAAC5B,EAAK6B,GAClC7B,OAAAA,EAAI4B,MACF,SAACnB,EAAOqB,GAAgBrB,OAAAA,IAAUxB,EAAU4C,GAAUC,SAGrCjD,IAASE,GAC5Ba,IACAd,GAAgB,GAEhBA,GAAgB,EAElBc,IAEAE,IAKCA,MACHpB,EAAY6B,UAAUG,OAAO,UAC7BhC,EAAYqD,MAAMC,MAAQ,WAG5B3D,SAASC,cAAc,eAAegC,UAAYvB","file":"main.9f081017.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst tablGamme = document.querySelector('.game-field');\nconst buttonStart = document.querySelector('.start');\nconst messageStart = document.querySelector('.message-start');\nconst messageWin = document.querySelector('.message-win');\nconst messageOver = document.querySelector('.message-over');\nconst rows = 4;\nconst columns = 4;\nlet flag = 0;\nlet flagSetRandom = true;\nlet score = 0;\nlet gammeBoard = [];\nlet copyBoard = [];\nlet arrayEqual = false;\n\nbuttonStart.addEventListener('click', () => {\n  buttonStart.classList.value = '';\n  buttonStart.classList.add('button', 'restart');\n  buttonStart.innerText = 'Restart';\n  messageStart.classList.add('hidden');\n  messageOver.classList.add('hidden');\n  document.querySelector('.game-score').innerText = 0;\n  score = 0;\n  flagSetRandom = true;\n  setGame();\n});\n\nfunction setGame() {\n  gammeBoard = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      const tile = tablGamme.rows[r].cells[c];\n      const num = gammeBoard[r][c];\n\n      tile.id = r.toString() + c.toString();\n      updateTile(tile, num);\n    }\n  }\n  setRandomInEmptyCell();\n  setRandomInEmptyCell();\n}\n\nfunction emptyTile() {\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      if (gammeBoard[r][c] === 0) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction moves() {\n  for (let r = 0; r < rows - 1; r++) {\n    for (let c = 0; c < columns - 1; c++) {\n      if ((gammeBoard[r][c] === gammeBoard[r][c + 1])\n        || (gammeBoard[r][c] === 0)) {\n        return true;\n      }\n    }\n  }\n\n  for (let col = 0; col < columns - 1; col++) {\n    for (let row = 0; row < rows - 1; row++) {\n      if ((gammeBoard[row][col] === gammeBoard[row + 1][col])\n        || (gammeBoard[row][col] === 0)) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction setRandomInEmptyCell() {\n  if (!emptyTile() || !flagSetRandom) {\n    return;\n  }\n\n  let found = false;\n\n  while (!found) {\n    const r = Math.floor(Math.random() * rows);\n    const c = Math.floor(Math.random() * columns);\n\n    if (gammeBoard[r][c] === 0) {\n      gammeBoard[r][c] = Math.random() < 0.9 ? 2 : 4;\n\n      const tile = document.getElementById(r.toString() + c.toString());\n\n      tile.innerText = `${gammeBoard[r][c]}`;\n      tile.classList.add(`field-cell--${gammeBoard[r][c]}`);\n      found = true;\n    }\n  }\n}\n\nfunction updateTile(tile, num) {\n  tile.innerText = '';\n  tile.classList.value = '';\n  tile.classList.add('field-cell');\n\n  if (num > 0) {\n    tile.innerText = num;\n\n    if (num < 2048) {\n      tile.classList.add('field-cell--' + num.toString());\n    }\n\n    if (num === 2048) {\n      tile.classList.add('field-cell--' + num.toString());\n      messageWin.classList.remove('hidden');\n    }\n  }\n}\n\ndocument.addEventListener('keyup', (e) => {\n  switch (e.code) {\n    case 'ArrowLeft':\n      flag = score;\n\n      copyBoard = gammeBoard.map(row => row.slice());\n\n      slideLeft();\n\n      arrayEqual = gammeBoard.every((row, rowIndex) =>\n        row.every(\n          (value, columnIndex) => value === copyBoard[rowIndex][columnIndex]\n        ));\n\n      if ((arrayEqual) && (flag === score)) {\n        setRandomInEmptyCell();\n        flagSetRandom = false;\n      } else {\n        flagSetRandom = true;\n      }\n\n      setRandomInEmptyCell();\n\n      moves();\n\n      break;\n\n    case 'ArrowRight':\n      flag = score;\n\n      copyBoard = gammeBoard.map(row => row.slice());\n\n      slideRight();\n\n      arrayEqual = gammeBoard.every((row, rowIndex) =>\n        row.every(\n          (value, columnIndex) => value === copyBoard[rowIndex][columnIndex]\n        ));\n\n      if ((arrayEqual) && (flag === score)) {\n        setRandomInEmptyCell();\n        flagSetRandom = false;\n      } else {\n        flagSetRandom = true;\n      }\n\n      setRandomInEmptyCell();\n\n      moves();\n\n      break;\n\n    case 'ArrowUp':\n      flag = score;\n      slideUp();\n\n      copyBoard = gammeBoard.map(row => row.slice());\n\n      setRandomInEmptyCell();\n\n      arrayEqual = gammeBoard.every((row, rowIndex) =>\n        row.every(\n          (value, columnIndex) => value === copyBoard[rowIndex][columnIndex]\n        ));\n\n      if ((arrayEqual) && (flag === score)) {\n        setRandomInEmptyCell();\n        flagSetRandom = false;\n      } else {\n        flagSetRandom = true;\n      }\n\n      moves();\n\n      break;\n\n    case 'ArrowDown':\n      flag = score;\n      copyBoard = gammeBoard.map(row => row.slice());\n      slideDown();\n\n      arrayEqual = gammeBoard.every((row, rowIndex) =>\n        row.every(\n          (value, columnIndex) => value === copyBoard[rowIndex][columnIndex]\n        ));\n\n      if ((arrayEqual) && (flag === score)) {\n        setRandomInEmptyCell();\n        flagSetRandom = false;\n      } else {\n        flagSetRandom = true;\n      }\n      setRandomInEmptyCell();\n\n      moves();\n\n      break;\n  }\n\n  if (!moves()) {\n    messageOver.classList.remove('hidden');\n    messageOver.style.color = '#f87474';\n  }\n\n  document.querySelector('.game-score').innerText = score;\n});\n\nfunction filterZero(row) {\n  return row.filter(num => num !== 0);\n}\n\nfunction doubling(rowTemp) {\n  let row = filterZero(rowTemp);\n\n  for (let i = 0; i < row.length; i++) {\n    if (row[i] === row[i + 1]) {\n      row[i] *= 2;\n      row[i + 1] = 0;\n      score += row[i];\n    }\n  }\n\n  row = filterZero(row);\n\n  while (row.length < columns) {\n    row.push(0);\n  }\n\n  return row;\n}\n\nfunction slideLeft() {\n  for (let r = 0; r < rows; r++) {\n    let row = gammeBoard[r];\n\n    row = doubling(row);\n    gammeBoard[r] = row;\n\n    for (let c = 0; c < columns; c++) {\n      const tile = document.getElementById(r.toString() + c.toString());\n      const num = gammeBoard[r][c];\n\n      updateTile(tile, num);\n    }\n  }\n}\n\nfunction slideRight() {\n  for (let r = 0; r < rows; r++) {\n    let row = gammeBoard[r];\n\n    row.reverse();\n    row = doubling(row);\n    row.reverse();\n    gammeBoard[r] = row;\n\n    for (let c = 0; c < columns; c++) {\n      const tile = document.getElementById(r.toString() + c.toString());\n      const num = gammeBoard[r][c];\n\n      updateTile(tile, num);\n    }\n  }\n}\n\nfunction slideUp() {\n  for (let c = 0; c < columns; c++) {\n    let row = [\n      gammeBoard[0][c],\n      gammeBoard[1][c],\n      gammeBoard[2][c],\n      gammeBoard[3][c],\n    ];\n\n    row = doubling(row);\n\n    for (let r = 0; r < rows; r++) {\n      gammeBoard[r][c] = row[r];\n\n      const tile = document.getElementById(r.toString() + c.toString());\n\n      const num = gammeBoard[r][c];\n\n      updateTile(tile, num);\n    }\n  }\n}\n\nfunction slideDown() {\n  for (let c = 0; c < columns; c++) {\n    let row = [\n      gammeBoard[0][c],\n      gammeBoard[1][c],\n      gammeBoard[2][c],\n      gammeBoard[3][c],\n    ];\n\n    row.reverse();\n    row = doubling(row);\n    row.reverse();\n\n    for (let r = 0; r < rows; r++) {\n      gammeBoard[r][c] = row[r];\n\n      const tile = document.getElementById(r.toString() + c.toString());\n\n      const num = gammeBoard[r][c];\n\n      updateTile(tile, num);\n    }\n  }\n}\n"]}